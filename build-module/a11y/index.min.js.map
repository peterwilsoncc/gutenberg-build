{"version":3,"file":"./build-module/a11y/index.min.js","mappings":"AACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,KCOnE,SAASI,EAAcC,EAAW,UAChD,MAAMC,EAAYC,SAASC,cAAe,OAC1CF,EAAUG,GAAM,cAAcJ,IAC9BC,EAAUI,UAAY,oBAEtBJ,EAAUK,aACT,QACA,iNAYDL,EAAUK,aAAc,YAAaN,GACrCC,EAAUK,aAAc,gBAAiB,kBACzCL,EAAUK,aAAc,cAAe,QAEvC,MAAM,KAAEC,GAASL,SAKjB,OAJKK,GACJA,EAAKC,YAAaP,GAGZA,CACR,C,yBCpCA,IAAIQ,EAAkB,GCoDf,SAASC,EAAOC,EAASX,ICjDjB,WACd,MAAMY,EAAUV,SAASW,uBAAwB,qBAC3CC,EAAYZ,SAASa,eAAgB,yBAE3C,IAAM,IAAIC,EAAI,EAAGA,EAAIJ,EAAQK,OAAQD,IACpCJ,EAASI,GAAIE,YAAc,GAIvBJ,GACJA,EAAUR,aAAc,SAAU,SAEpC,CD0CCa,GAEAR,EDlDc,SAAwBA,GAoBtC,OAZAA,EAAUA,EAAQS,QAAS,YAAa,KAMnCX,IAAoBE,IACxBA,GAAW,KAGZF,EAAkBE,EAEXA,CACR,CC6BWU,CAAeV,GAEzB,MAAMG,EAAYZ,SAASa,eAAgB,yBACrCO,EAAqBpB,SAASa,eACnC,wBAEKQ,EAAkBrB,SAASa,eAAgB,qBAE5CO,GAAmC,cAAbtB,EAC1BsB,EAAmBJ,YAAcP,EACtBY,IACXA,EAAgBL,YAAcP,GAO1BG,GACJA,EAAUU,gBAAiB,SAE7B,CExEA,IAAIC,EAAoB,gBACxB,IACC,MAAMP,EAAchB,SAASa,eAC5B,0CACEG,YACH,GAAKA,EAAc,KAAAQ,EAClB,MAAMC,EAASC,KAAKC,MAAOX,GAC3BO,EAA+C,QAA9BC,EAAGC,GAAQG,MAAMC,qBAAa,IAAAL,EAAAA,EAAID,CACpD,CACD,CAAE,MAAO,CAKF,MAAMO,GFVsBC,EEUKR,EFThC,WACN,MAAMX,EAAYZ,SAASa,eAAgB,yBACrCO,EAAqBpB,SAASa,eACnC,wBAEKQ,EAAkBrB,SAASa,eAAgB,qBAE9B,OAAdD,GGXQ,SAAuBmB,GACrC,MAAMnB,EAAYZ,SAASC,cAAe,KAE1CW,EAAUV,GAAK,wBACfU,EAAUT,UAAY,wBACtBS,EAAUI,YAAce,EAExBnB,EAAUR,aACT,QACA,iNAYDQ,EAAUR,aAAc,SAAU,UAElC,MAAM,KAAEC,GAASL,SACZK,GACJA,EAAKC,YAAaM,EAIpB,CHjBGoB,CAAcD,GAGa,OAAvBX,GACJvB,EAAc,aAGU,OAApBwB,GACJxB,EAAc,SAEhB,GAnBM,IAA4BkC,EEYnCD,I","sources":["webpack://wp/webpack/bootstrap","webpack://wp/webpack/runtime/define property getters","webpack://wp/webpack/runtime/hasOwnProperty shorthand","webpack://wp/@wordpress/a11y/src/shared/add-container.js","webpack://wp/@wordpress/a11y/src/shared/filter-message.js","webpack://wp/@wordpress/a11y/src/shared/index.js","webpack://wp/@wordpress/a11y/src/shared/clear.js","webpack://wp/@wordpress/a11y/src/module/index.ts","webpack://wp/@wordpress/a11y/src/shared/add-intro-text.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\n * Build the live regions markup.\n *\n * @param {string} [ariaLive] Value for the 'aria-live' attribute; default: 'polite'.\n *\n * @return {HTMLDivElement} The ARIA live region HTML element.\n */\nexport default function addContainer( ariaLive = 'polite' ) {\n\tconst container = document.createElement( 'div' );\n\tcontainer.id = `a11y-speak-${ ariaLive }`;\n\tcontainer.className = 'a11y-speak-region';\n\n\tcontainer.setAttribute(\n\t\t'style',\n\t\t'position: absolute;' +\n\t\t\t'margin: -1px;' +\n\t\t\t'padding: 0;' +\n\t\t\t'height: 1px;' +\n\t\t\t'width: 1px;' +\n\t\t\t'overflow: hidden;' +\n\t\t\t'clip: rect(1px, 1px, 1px, 1px);' +\n\t\t\t'-webkit-clip-path: inset(50%);' +\n\t\t\t'clip-path: inset(50%);' +\n\t\t\t'border: 0;' +\n\t\t\t'word-wrap: normal !important;'\n\t);\n\tcontainer.setAttribute( 'aria-live', ariaLive );\n\tcontainer.setAttribute( 'aria-relevant', 'additions text' );\n\tcontainer.setAttribute( 'aria-atomic', 'true' );\n\n\tconst { body } = document;\n\tif ( body ) {\n\t\tbody.appendChild( container );\n\t}\n\n\treturn container;\n}\n","let previousMessage = '';\n\n/**\n * Filter the message to be announced to the screenreader.\n *\n * @param {string} message The message to be announced.\n *\n * @return {string} The filtered message.\n */\nexport default function filterMessage( message ) {\n\t/*\n\t * Strip HTML tags (if any) from the message string. Ideally, messages should\n\t * be simple strings, carefully crafted for specific use with A11ySpeak.\n\t * When re-using already existing strings this will ensure simple HTML to be\n\t * stripped out and replaced with a space. Browsers will collapse multiple\n\t * spaces natively.\n\t */\n\tmessage = message.replace( /<[^<>]+>/g, ' ' );\n\n\t/*\n\t * Safari + VoiceOver don't announce repeated, identical strings. We use\n\t * a `no-break space` to force them to think identical strings are different.\n\t */\n\tif ( previousMessage === message ) {\n\t\tmessage += '\\u00A0';\n\t}\n\n\tpreviousMessage = message;\n\n\treturn message;\n}\n","/**\n * Internal dependencies\n */\nimport addContainer from './add-container';\nimport addIntroText from './add-intro-text';\nimport clear from './clear';\nimport filterMessage from './filter-message';\n\n/**\n * Create the live regions.\n * @param {string} introTextContent The intro text content.\n */\nexport function makeSetupFunction( introTextContent ) {\n\treturn function setup() {\n\t\tconst introText = document.getElementById( 'a11y-speak-intro-text' );\n\t\tconst containerAssertive = document.getElementById(\n\t\t\t'a11y-speak-assertive'\n\t\t);\n\t\tconst containerPolite = document.getElementById( 'a11y-speak-polite' );\n\n\t\tif ( introText === null ) {\n\t\t\taddIntroText( introTextContent );\n\t\t}\n\n\t\tif ( containerAssertive === null ) {\n\t\t\taddContainer( 'assertive' );\n\t\t}\n\n\t\tif ( containerPolite === null ) {\n\t\t\taddContainer( 'polite' );\n\t\t}\n\t};\n}\n\n/**\n * Allows you to easily announce dynamic interface updates to screen readers using ARIA live regions.\n * This module is inspired by the `speak` function in `wp-a11y.js`.\n *\n * @param {string}               message    The message to be announced by assistive technologies.\n * @param {'polite'|'assertive'} [ariaLive] The politeness level for aria-live; default: 'polite'.\n *\n * @example\n * ```js\n * import { speak } from '@wordpress/a11y';\n *\n * // For polite messages that shouldn't interrupt what screen readers are currently announcing.\n * speak( 'The message you want to send to the ARIA live region' );\n *\n * // For assertive messages that should interrupt what screen readers are currently announcing.\n * speak( 'The message you want to send to the ARIA live region', 'assertive' );\n * ```\n */\nexport function speak( message, ariaLive ) {\n\t/*\n\t * Clear previous messages to allow repeated strings being read out and hide\n\t * the explanatory text from assistive technologies.\n\t */\n\tclear();\n\n\tmessage = filterMessage( message );\n\n\tconst introText = document.getElementById( 'a11y-speak-intro-text' );\n\tconst containerAssertive = document.getElementById(\n\t\t'a11y-speak-assertive'\n\t);\n\tconst containerPolite = document.getElementById( 'a11y-speak-polite' );\n\n\tif ( containerAssertive && ariaLive === 'assertive' ) {\n\t\tcontainerAssertive.textContent = message;\n\t} else if ( containerPolite ) {\n\t\tcontainerPolite.textContent = message;\n\t}\n\n\t/*\n\t * Make the explanatory text available to assistive technologies by removing\n\t * the 'hidden' HTML attribute.\n\t */\n\tif ( introText ) {\n\t\tintroText.removeAttribute( 'hidden' );\n\t}\n}\n","/**\n * Clears the a11y-speak-region elements and hides the explanatory text.\n */\nexport default function clear() {\n\tconst regions = document.getElementsByClassName( 'a11y-speak-region' );\n\tconst introText = document.getElementById( 'a11y-speak-intro-text' );\n\n\tfor ( let i = 0; i < regions.length; i++ ) {\n\t\tregions[ i ].textContent = '';\n\t}\n\n\t// Make sure the explanatory text is hidden from assistive technologies.\n\tif ( introText ) {\n\t\tintroText.setAttribute( 'hidden', 'hidden' );\n\t}\n}\n","/**\n * Internal dependencies\n */\nimport { makeSetupFunction } from '../shared/index';\nexport { speak } from '../shared/index';\n\n// Without an i18n Script Module, \"Notifications\" (the only localized text used in this module)\n// will be translated on the server and provided as script-module data.\nlet notificationsText = 'Notifications';\ntry {\n\tconst textContent = document.getElementById(\n\t\t'wp-script-module-data-@wordpress/a11y'\n\t)?.textContent;\n\tif ( textContent ) {\n\t\tconst parsed = JSON.parse( textContent );\n\t\tnotificationsText = parsed?.i18n?.Notifications ?? notificationsText;\n\t}\n} catch {}\n\n/**\n * Create the live regions.\n */\nexport const setup = makeSetupFunction( notificationsText );\n\nsetup();\n","/**\n * Build the explanatory text to be placed before the aria live regions.\n *\n * This text is initially hidden from assistive technologies by using a `hidden`\n * HTML attribute which is then removed once a message fills the aria-live regions.\n *\n * @param {string} introTextContent The translated intro text content.\n * @return {HTMLParagraphElement} The explanatory text HTML element.\n */\nexport default function addIntroText( introTextContent: string ) {\n\tconst introText = document.createElement( 'p' );\n\n\tintroText.id = 'a11y-speak-intro-text';\n\tintroText.className = 'a11y-speak-intro-text';\n\tintroText.textContent = introTextContent;\n\n\tintroText.setAttribute(\n\t\t'style',\n\t\t'position: absolute;' +\n\t\t\t'margin: -1px;' +\n\t\t\t'padding: 0;' +\n\t\t\t'height: 1px;' +\n\t\t\t'width: 1px;' +\n\t\t\t'overflow: hidden;' +\n\t\t\t'clip: rect(1px, 1px, 1px, 1px);' +\n\t\t\t'-webkit-clip-path: inset(50%);' +\n\t\t\t'clip-path: inset(50%);' +\n\t\t\t'border: 0;' +\n\t\t\t'word-wrap: normal !important;'\n\t);\n\tintroText.setAttribute( 'hidden', 'hidden' );\n\n\tconst { body } = document;\n\tif ( body ) {\n\t\tbody.appendChild( introText );\n\t}\n\n\treturn introText;\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","addContainer","ariaLive","container","document","createElement","id","className","setAttribute","body","appendChild","previousMessage","speak","message","regions","getElementsByClassName","introText","getElementById","i","length","textContent","clear","replace","filterMessage","containerAssertive","containerPolite","removeAttribute","notificationsText","_parsed$i18n$Notifica","parsed","JSON","parse","i18n","Notifications","setup","introTextContent","addIntroText"],"sourceRoot":""}